import serial
import re

import time

def read_gyro(stm32):
    packet = bytearray()
    packet.append(0x02)  # Command for get_gyro
    stm32.write(packet)
    data = stm32.readline().decode("utf-8").strip()
    return data

def extract_coordinates(data):
    match = re.search(r'x: ([-+]?\d+\.\d+), y: ([-+]?\d+\.\d+)', data)
    if match:
        x_coord = float(match.group(1))
        y_coord = float(match.group(2))
        return x_coord, y_coord
    else:
        return None, None

def lit_led(stm32, led_number):
    packet = bytearray()
    packet.append(0x01)  # Command for Set_LED
    packet.append(led_number)
    stm32.write(packet)
    time.sleep(0.5)  # Add a delay of 0.5 seconds after LED update

def main():
    port_name = "/dev/ttyACM0"
    stm32 = serial.Serial(port_name, 9600, timeout=1)
    print("Port Opened")

    prev_x, prev_y = None, None

    try:
        while True:
            data = read_gyro(stm32)
            x, y = extract_coordinates(data)
            if x is not None and y is not None:
                if prev_x is not None:
                    x_diff = x - prev_x
                    if x_diff > 5000:
                        print("Pitch Down: X increasing by more than 5000")
                        lit_led(stm32, 4)  # Lit LED number 0 (pitch down)
                    elif x_diff < -5000:
                        print("Pitch Up: X decreasing by more than 5000")
                        lit_led(stm32, 0)  # Lit LED number 4 (pitch up)
                if prev_y is not None:
                    y_diff = y - prev_y
                    if y_diff > 20000:
                        print("Roll West: Y increasing by more than 20000")
                        lit_led(stm32, 6)  # Lit LED number 2 (roll west)
                    elif y_diff < -20000:
                        print("Roll East: Y decreasing by more than 20000")
                        lit_led(stm32, 2)  # Lit LED number 6 (roll east)
                prev_x, prev_y = x, y
            time.sleep(1)  # Add a delay of 1 second between each iteration of the main loop
    except KeyboardInterrupt:
        print("Stopping...")
        stm32.close()

if __name__ == "__main__":
    main()
